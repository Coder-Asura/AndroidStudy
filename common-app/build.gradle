apply plugin: 'com.android.application'

def versionMajor = 1
def versionMinor = 0
def versionPatch = 0

def baseVersionCode = versionMajor * 100 + versionMinor * 10 + versionPatch
def baseVersionName = versionMajor + '.' + versionMinor + '.' + versionPatch

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId "com.lxd.common_app"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode baseVersionCode
        versionName "$baseVersionName"
        flavorDimensions "channel"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file('Asura_Keystore.jks')
            storePassword '123456'
            keyAlias 'asura'
            keyPassword '123456'
        }
    }

    buildTypes {
        release {
            buildConfigField "boolean", "LOG_ENABLE", "false"
            buildConfigField "boolean", "BUGLY_ENABLE_DEBUG", "false"
            resValue "string", "AppName", "CommonApp"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release//打包命令行：gradlew assembleRelease

            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = "CommonApp_v${variant.productFlavors[0].versionName}_${releaseTime()}${variant.productFlavors[0].name}.apk"
                        outputFileName = new File("../../outputs/apks", fileName)
                    }
                }
            }
        }

        debug {
            buildConfigField "boolean", "LOG_ENABLE", "true"
            buildConfigField "boolean", "BUGLY_ENABLE_DEBUG", "true"
            resValue "string", "AppName", "CommonAppTest"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        _test {
            dimension "channel"
            applicationId "com.lxd.common_app.test"
            minSdkVersion 21
        }
        _release {
            dimension "channel"
            applicationId "com.lxd.common_app"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    testImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'

    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'

    implementation rootProject.ext.dependencies."appcompat-v7"
    implementation rootProject.ext.dependencies."design"
    implementation rootProject.ext.dependencies."recyclerview"

    implementation rootProject.ext.dependencies["logger"]
    implementation rootProject.ext.dependencies."retrofit2"
    implementation rootProject.ext.dependencies."logging-interceptor"
    implementation rootProject.ext.dependencies."adapter-rxjava2"
    implementation rootProject.ext.dependencies."converter-gson"

    implementation rootProject.ext.dependencies."rxjava"
    implementation rootProject.ext.dependencies."rxandroid"

    implementation rootProject.ext.dependencies."gson"

    implementation rootProject.ext.dependencies["glide"]

    implementation rootProject.ext.dependencies."butterknife"
    annotationProcessor rootProject.ext.dependencies."butterknife-compiler"

    implementation 'com.jaeger.statusbaruitl:library:1.3.0'
    implementation 'com.r0adkll:slidableactivity:2.0.5'
}

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}